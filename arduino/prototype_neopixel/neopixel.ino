
//다양한 이미지,광고들을 순차적으로 네오픽셀에 출력


#include <avr/pgmspace.h>
#include "FastLED.h"

#define NUM_LEDS 256
#define DATA_PIN 6

CRGB leds[NUM_LEDS];


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//오른쪽 화살표
const long right[] PROGMEM =
{
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,   
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff,   
0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff,  
0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,  
0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff0000, 0xff0000, 0xff3333, 0xffffff,   
0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 
0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff3333,   
0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff,   
0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff,   
0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffcccc, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff,  
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//왼쪽 화살표
const long left[] PROGMEM =
{
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,  
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffcccc, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,   
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,    
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 
0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333,   
0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff3333,  
0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,    
0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff3333, 0xff0000, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 
0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,   
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff,  
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xff3333, 0xff0000, 0xff0000, 0xff3333, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff  
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//비상등2 
const long stopplz2[] PROGMEM =
{
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x990000, 0x990000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x990000, 0x990000, 0xffffff, 0xffffff, 0x990000, 0x990000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 
0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 
0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 
0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 
0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0xffffff, 0xffffff, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 
0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 0x990000, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//전체 흰색 배경
const long whitebackground[] PROGMEM =
{
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 
0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//벌레
const long DigDug01[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x000000, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,  
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x000000, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0xcc3300, 0xcc3300, 0x009999, 0xcc3300, 0xcc3300, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000,   
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0xcc3300, 0xff6600, 0x009999, 0xcc3300, 0xff6600, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x009999, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,  
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0xffff00, 0xffff00, 0x009999, 0xffff00, 0xffff00, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x009999, 0x009999, 0x009999, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x009999, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000,  
0x000000, 0x009999, 0x009999, 0x009999, 0x009999, 0x009999, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x009999, 0x009999, 0x009999, 0x009999, 0x009999, 
0x000000, 0x009999, 0x009999, 0x009999, 0x009999, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x009999, 0x009999, 0x009999, 0x009999, 0x000000, 0x000000,   
0x000000, 0x000000, 0x009999, 0xcc3300, 0x009999, 0x009999, 0x000000, 0xcc3300, 0x000000, 0xcc3300, 0x000000, 0x009999, 0x009999, 0xcc3300, 0x009999, 0x000000, 
0x009999, 0x009999, 0xcc3300, 0x009999, 0x000000, 0x000000, 0xcc6600, 0x000000, 0xff6600, 0x000000, 0x000000, 0x009999, 0xcc3300, 0x009999, 0x009999, 0x000000,   
0x000000, 0x009999, 0xcc3300, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0xcc3300, 0x009999, 
0x009999, 0xff6600, 0xcc3300, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0xff6600, 0xcc3300, 0x009999, 0x000000,   
0x000000, 0x009999, 0xcc3300, 0xcc3300, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0xcc3300, 0xcc3300, 0x009999, 
0x009999, 0x009999, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x009999, 0x009999, 0x000000,   
0x000000, 0x000000, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x000000

};

const long DigDug02[] PROGMEM =
{
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x000000, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0xcc3300, 0xcc3300, 0x009999, 0xcc3300, 0xcc3300, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0xcc3300, 0xff6600, 0x009999, 0xcc3300, 0xff6600, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x009999, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,  
0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0xffff00, 0xffff00, 0x009999, 0xffff00, 0xffff00, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x009999, 0x009999, 0x009999, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x009999, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000,  
0x000000, 0x009999, 0x009999, 0x009999, 0x009999, 0x009999, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x009999, 0x009999, 0x009999, 0x009999, 0x009999, 
0x000000, 0x009999, 0x009999, 0x009999, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x009999, 0x009999, 0x009999, 0x000000, 0x000000,  
0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x000000, 0x000000, 0xcc3300, 0x000000, 0xcc3300, 0x000000, 0x000000, 0x009999, 0x009999, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x000000, 0x000000, 0xff6600, 0xff6600, 0x000000, 0x000000, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000,  
0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x009999, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000,  
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x009999, 0x000000, 0x009999, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x009999, 0x000000, 0x009999, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000

};




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//1. 
const long pizzahut1[] PROGMEM =
{
0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,  0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,       
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD,  0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,      
0xFFFFFF, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE,  0xFEFEFE, 0xFFFFFF, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE,       
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD,  0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,       
0xFDFDFD, 0xD5B1AD, 0xD98C7D, 0xCF1211, 0xC55757, 0xC46060, 0xCA6F6F, 0xD58F8F, 0xD79696, 0xE1ADAD, 0xE4B6B6, 0xE7BDBD, 0xEBC8C8, 0xEDCCCC, 0xEDCCCC, 0xF2DADA,  0xFAF1F1, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF9F1F1, 0xF7E8E8, 0xF6E7E7, 0xF4E0E0, 0xF6E5E5, 0xF6E7E7, 0xF4E1E1, 0xEFC9D2, 0xEAC5C5, 0xE5BABA, 0xDDA4A4,      
0xD01717, 0xD61616, 0xE01616, 0xD91515, 0xCF1414, 0xCE1313, 0xCE1212, 0xCD1010, 0xCD0F0F, 0xCC0B0B, 0xCA1414, 0xC55A5A, 0xDD5D5D, 0xD6ACA7, 0xF9F5F5, 0xFDFDFD,  0xEB7869, 0xDF1414, 0xDF1515, 0xE01616, 0xE01818, 0xE11919, 0xE01818, 0xE01818, 0xDC1919, 0xC61919, 0xC61A1A, 0xC51A1A, 0xC51A1A, 0xC51A1A, 0xC51A1A, 0xD11A1A, 
0xFDFDFD, 0xFCFCFC, 0xF8F3F2, 0xF3D5D5, 0xDCA1A1, 0xD55D55, 0xD5544A, 0xD36563, 0xD26969, 0xD26969, 0xCC6161, 0xC95D5D, 0xCB5D5D, 0xCC5D5D, 0xCB5D5D, 0xC95D5D,  0xDD5151, 0xDA0000, 0xDA0000, 0xDA0000, 0xDA0000, 0xDA0000, 0xDA0000, 0xDD0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xCF3131, 0xD98181, 0xEFC7C5,       
0xD89797, 0xDCA0A0, 0xDA9C9C, 0xDA9C9C, 0xDA9C9C, 0xD99898, 0xD18282, 0xC56060, 0xCB6E6D, 0xE3ACA9, 0xF1D3D1, 0xF8EFEF, 0xFDFAFA, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD,  0xF9EEEE, 0xECCBCB, 0xE18076, 0xE23318, 0xE23318, 0xE12511, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xE05050, 0xC85B5B,
0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCF9F9, 0xF9EFEF, 0xF2DEDE, 0xEDCDCD, 0xE3B3B3, 0xCF7E7E, 0xC05555, 0xC05555, 0xC05555, 0xC05555, 0xC05555,  0xC25A5A, 0xC85C5C, 0xE04D4D, 0xDE0303, 0xDE0000, 0xDE0000, 0xDE0000, 0xE12913, 0xE23117, 0xE23117, 0xD04B3E, 0xDD8C84, 0xEEB8B1, 0xF7DFDD, 0xFBF5F5, 0xFCFBFB,     
0xC05555, 0xC05555, 0xC05555, 0xC05555, 0xD8908B, 0xEECFCF, 0xF8EEEE, 0xFCF9F9, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD,  0xFCFCFC, 0xFCFCFC, 0xFCFBFB, 0xFAF4F4, 0xF5E6E6, 0xF0CECC, 0xEDA59D, 0xE15446, 0xE23418, 0xDE0000, 0xDE0000, 0xDE0505, 0xDF4A4A, 0xC95C5C, 0xC25A5A, 0xD18383,
0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCF9F9, 0xC05555, 0xC05555, 0xC05555, 0xC05555, 0xC05555,  0xC05555, 0xC05555, 0xC25A5A, 0xCA5C5C, 0xCA4242, 0xDC0606, 0xDE0000, 0xE23418, 0xE59089, 0xF6E3E3, 0xFCFBFB, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,      
0xC05555, 0xC05555, 0xC05555, 0xC05555, 0xF9F2F2, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD,  0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFAF4F4, 0xEEBAB4, 0xE23418, 0xDE0000, 0xDB0909, 0xC25A5A, 0xC35C5C, 0xC05555, 0xC05555, 0xC05555,
0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF4E5E5, 0xC05555, 0xC05555, 0xC05555,  0xC05555, 0xC05555, 0xC05555, 0xC05555, 0xC05555, 0xD86161, 0xD24949, 0xD41E14, 0xF3C4C1, 0xFCFBFB, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,       
0xEED3D3, 0xF2DDDD, 0xF9F1F1, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD,  0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF8E3E3, 0xE59393, 0xE5B9B9, 0xECCCCC, 0xEED3D3, 0xEED3D3, 0xEED3D3, 0xEFD4D4, 0xEED3D3,
0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,  0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCF8F8, 0xFBF4F4, 0xFAF3F3, 0xFCFBFB, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,     
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD,  0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC
};
////////////////////////////////////////////
//2.
const long pizzahut2[] PROGMEM =
{
0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,    0xFCFCFC, 0xFCFCFC, 0xF9F9F9, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,    0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF9F9F9, 0xBFBFBF, 0xDBDBDB, 0xFCFCFC,
0xFEFEFE, 0xFFFFFF, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE,    0xFCFCFC, 0xA6A6A6, 0x0D0D0D, 0xB9B9B9, 0xF9F9F9, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE,
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,    0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xEDEDED, 0x5A5A5A, 0x0D0D0D, 0xD9D9D9, 0xFCFCFC,
0xFAF1F1, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF2F2F2, 0xF9F1F1, 0xF7E8E8, 0xF6E7E7, 0xF4E0E0, 0xF6E5E5, 0xF6E7E7, 0xF4E1E1, 0xEFC9D2, 0xEAC5C5, 0xE5BABA, 0xDDA4A4,    0xC56565, 0xECECEC, 0x000000, 0x000000, 0xB7B7B7, 0xF5F5F5, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xE6E6E6, 0x9B9898, 0xC9C7C7, 0xDFDFDF, 0x9D9B9B,
0xEB7869, 0xDF1414, 0xDF1515, 0xE01616, 0xE01818, 0xE11919, 0xE01818, 0xE01818, 0xDC1919, 0xC61919, 0xC61A1A, 0xC51A1A, 0xC51A1A, 0xC51A1A, 0xC51A1A, 0xD11A1A,    0x535353, 0xAEAEAE, 0xAEADAD, 0x565353, 0xA6A3A3, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xE9E9E9, 0x606060, 0x000000, 0x545454, 0xFDFDFD, 0xEFA780,
0xDD5151, 0xDA0000, 0xDA0000, 0xDA0000, 0xDA0000, 0xDA0000, 0xDA0000, 0xDD0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xCF3131, 0xD98181, 0xEFC7C5,    0xF9E7E1, 0xFDFDFD, 0xB0B0B0, 0x000000, 0x000000, 0xA8A5A5, 0x939292, 0x8D8D8D, 0xCECECE, 0xD7D6D6, 0xF1F1F1, 0x9E9B9B, 0x4E4B4B, 0x6A6767, 0xBAB9B9, 0x9E9E9E,
0xF9EEEE, 0xECCBCB, 0xE18076, 0xE23318, 0xE23318, 0xE12511, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xDE0000, 0xE05050, 0xC85B5B,    0xE2E2E2, 0xA09F9F, 0x413E3E, 0x6A6868, 0xC4C3C3, 0x9A9898, 0x494848, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xE5E5E5, 0xFDFDFD, 0xFDFBFB,
0xC25A5A, 0xC85C5C, 0xE04D4D, 0xDE0303, 0xDE0000, 0xDE0000, 0xDE0000, 0xE12913, 0xE23117, 0xE23117, 0xD04B3E, 0xDD8C84, 0xEEB8B1, 0xF7DFDD, 0xFBF5F5, 0xFCFBFB,    0xFCFCFC, 0xFDFDFD, 0xFAFAFA, 0xA1A1A1, 0x000000, 0x000000, 0xC3C3C3, 0xE2E1E1, 0xBAB8B8, 0x767373, 0x4C4A4A, 0x909090, 0x848484, 0x4D4B4B, 0x818181, 0xDADADA,
0xFCFCFC, 0xFCFCFC, 0xFCFBFB, 0xFAF4F4, 0xF5E6E6, 0xF0CECC, 0xEDA59D, 0xE15446, 0xE23418, 0xDE0000, 0xDE0000, 0xDE0505, 0xDF4A4A, 0xC95C5C, 0xC25A5A, 0xD18383,    0xB1B1B1, 0x4F4E4E, 0x747474, 0xA7A7A7, 0x474646, 0x4D4D4D, 0xC7C5C5, 0xF4F3F3, 0xF1F1F1, 0xB0B0B0, 0x000000, 0x565656, 0xE2E2E2, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,
0xC05555, 0xC05555, 0xC25A5A, 0xCA5C5C, 0xCA4242, 0xDC0606, 0xDE0000, 0xE23418, 0xE59089, 0xF6E3E3, 0xFCFBFB, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,    0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xF9F9F9, 0xA8A8A8, 0x000000, 0x6B6B6B, 0xE2E2E2, 0xFCFCFC, 0xDBD9D9, 0x535353, 0x000000, 0xA4A4A4, 0xBCBBBB, 0x696969, 0xA5A5A5,
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFAF4F4, 0xEEBAB4, 0xE23418, 0xDE0000, 0xDB0909, 0xC25A5A, 0xC35C5C, 0xC05555, 0xC05555, 0xC05555,    0x33FF33, 0x33FF33, 0xECECEC, 0xA7A7A7, 0x000000, 0x434242, 0xA9A7A7, 0xF0F0F0, 0xC3C2C2, 0x484848, 0x595959, 0xEBEBEB, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,
0xC05555, 0xC05555, 0xC05555, 0xC05555, 0xC05555, 0xD86161, 0xD24949, 0xD41E14, 0xF3C4C1, 0xFCFBFB, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,    0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xCBC9C9, 0x525151, 0x000000, 0x666666, 0x7A7979, 0x434242, 0x000000, 0x454343, 0xC0BFBF, 0xFBFBFB, 0x33FF33, 0x33FF33,
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF8E3E3, 0xE59393, 0xE5B9B9, 0xECCCCC, 0xEED3D3, 0xEED3D3, 0xEED3D3, 0xEFD4D4, 0xEED3D3,    0x33FF33, 0xDFF0E6, 0xFCFCFC, 0xE6E6E6, 0x9C9A9A, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xB3B0B0, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,
0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCF8F8, 0xFBF4F4, 0xFAF3F3, 0xFCFBFB, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,    0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xDCDCDC, 0x9F9E9E, 0x8F8F8F, 0x808080, 0x8A8A8A, 0x959595, 0xB8B6B6, 0xE7E7E7, 0xFAFAFA, 0xFCFCFC, 0xFCFCFC, 0xDEF0E5,
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,    0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFBFBFB, 0xF4F4F4, 0xEBEBEB, 0xE3E3E3, 0xEFEFEF, 0xF7F7F7, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC  
};
/////////////////////////////////////////////
//3.
const long pizzahut3[] PROGMEM =
{
0xFCFCFC, 0xFCFCFC, 0xF9F9F9, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,        0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,   
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF9F9F9, 0xBFBFBF, 0xDBDBDB, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,
0xFCFCFC, 0xA6A6A6, 0x0D0D0D, 0xB9B9B9, 0xF9F9F9, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE,        0xFEFEFE, 0xFFFFFF, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE,    
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xEDEDED, 0x5A5A5A, 0x0D0D0D, 0xD9D9D9, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF3F3F3, 0xD3D3D3, 0xC4C4C4, 0xDBDBDB, 0xE8E8E8, 0xF3F3F3, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 
0xC56565, 0xECECEC, 0x242424, 0x292929, 0xB7B7B7, 0xF5F5F5, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xE6E6E6, 0x9B9898, 0xC9C7C7, 0xDFDFDF, 0x9D9B9B,        0x808080, 0x808080, 0x848484, 0x606060, 0x484848, 0x474545, 0x464545, 0x464444, 0x000000, 0x000000, 0xA0A0A0, 0xE1E1E1, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,   
0x535353, 0xAEAEAE, 0xAEADAD, 0x565353, 0xA6A3A3, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xE9E9E9, 0x606060, 0x282828, 0x545454, 0xFDFDFD, 0xEFA780,        0xFCFCFC, 0xFCFCFC, 0xF0F0F0, 0xD4D4D4, 0xBABABA, 0xABABAB, 0xBDBDBD, 0xCDCDCD, 0xC0C0C0, 0x000000, 0x000000, 0xFEFEFE, 0x2C2C2C, 0x303030, 0x2F2F2F, 0x2F2F2F,
0xF9E7E1, 0xFDFDFD, 0xB0B0B0, 0x2B2B2B, 0x2D2D2D, 0xA8A5A5, 0x939292, 0x8D8D8D, 0xCECECE, 0xD7D6D6, 0xF1F1F1, 0x9E9B9B, 0x4E4B4B, 0x6A6767, 0xBAB9B9, 0x9E9E9E,        0x262626, 0x262626, 0x949494, 0xDBDBDB, 0xE1E1E1, 0xA7A7A7, 0x464646, 0x3E3E3E, 0x515151, 0x636363, 0x7D7D7D, 0x888888, 0xA1A1A1, 0xAFAFAF, 0x989898, 0xABABAB,  
0xE2E2E2, 0xA09F9F, 0x413E3E, 0x6A6868, 0xC4C3C3, 0x9A9898, 0x494848, 0x000000, 0x000000, 0x000000, 0x000000, 0x262626, 0x2C2C2C, 0xE5E5E5, 0xFDFDFD, 0xFDFBFB,        0x4C4B4B, 0x4B4A4A, 0x8C8C8C, 0xECECEC, 0xE7E7E7, 0xC4C3C3, 0x605D5D, 0x2A2A2A, 0x313030, 0x797676, 0xEFEFEF, 0xF3F3F3, 0x8F8F8F, 0x3D3D3D, 0x262626, 0x696969, 
0xFCFCFC, 0xFDFDFD, 0xFAFAFA, 0xA1A1A1, 0x2E2E2E, 0x353434, 0xC3C3C3, 0xE2E1E1, 0xBAB8B8, 0x767373, 0x4C4A4A, 0x909090, 0x848484, 0x4D4B4B, 0x818181, 0xDADADA,        0xE1E1E1, 0xA6A6A6, 0x363434, 0x393939, 0x909090, 0xF0F0F0, 0xE4E3E3, 0x999999, 0x3A3A3A, 0x333232, 0x767373, 0xD8D7D7, 0xFCFCFC, 0xA09E9E, 0x4D4B4B, 0x818080,   
0xB1B1B1, 0x4F4E4E, 0x747474, 0xA7A7A7, 0x474646, 0x4D4D4D, 0xC7C5C5, 0xF4F3F3, 0xF1F1F1, 0xB0B0B0, 0x2A2A2A, 0x565656, 0xE2E2E2, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0x000000, 0x706E6E, 0xD7D6D6, 0xD6D5D5, 0x7B7878, 0x454343, 0x545454, 0xB8B8B8, 0xEBEBEB, 0xF2F2F2, 0xACACAC, 0x3C3C3C, 0x383636, 0x8B8A8A, 0xC9C9C9, 0xFCFCFC, 
0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xF9F9F9, 0xA8A8A8, 0x323232, 0x6B6B6B, 0xE2E2E2, 0xFCFCFC, 0xDBD9D9, 0x535353, 0x2A2A2A, 0xA4A4A4, 0xBCBBBB, 0x696969, 0xA5A5A5,        0x969393, 0x636161, 0x000000, 0x3B3939, 0x353333, 0x7B7878, 0xE9E9E9, 0xC7C7C7, 0x8A8A8A, 0x4E4E4E, 0x3C3A3A, 0x464343, 0x999696, 0xE0DFDF, 0xC9C8C8, 0x848282,   
0x33FF33, 0x33FF33, 0xECECEC, 0xA7A7A7, 0x262626, 0x434242, 0xA9A7A7, 0xF0F0F0, 0xC3C2C2, 0x484848, 0x595959, 0xEBEBEB, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0xE0DFDF, 0xF6F6F6, 0xE9E9E9, 0xABAAAA, 0x5C5C5C, 0x3F3E3E, 0x424242, 0x494949, 0x686868, 0xE0E0E0, 0xCFCECE, 0xB3B3B3, 0xB3B3B3, 0xB3B3B3, 0xA7A7A7, 0xA7A6A6,
0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xCBC9C9, 0x525151, 0x292929, 0x666666, 0x7A7979, 0x434242, 0x1D1D1D, 0x454343, 0xC0BFBF, 0xFBFBFB, 0x33FF33, 0x33FF33,        0xBDE1D8, 0xF2F2F2, 0xF8F8F8, 0xF8F8F8, 0xF8F8F8, 0xFCFCFC, 0xF2F2F2, 0xBBBBBB, 0xB8B8B8, 0xBABABA, 0xBABABA, 0xCACACA, 0xE6E6E6, 0xF8F8F8, 0xFCFCFC, 0xFCFCFC,   
0x33FF33, 0xDFF0E6, 0xFCFCFC, 0xE6E6E6, 0x9C9A9A, 0x3F3E3E, 0x202020, 0x2E2E2E, 0x2D2D2D, 0x222121, 0x3B3A3A, 0xB3B0B0, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0x5FBCA9,
0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xDCDCDC, 0x9F9E9E, 0x8F8F8F, 0x808080, 0x8A8A8A, 0x959595, 0xB8B6B6, 0xE7E7E7, 0xFAFAFA, 0xFCFCFC, 0xFCFCFC, 0xDEF0E5,        0xA1D3C9, 0xF4F4F4, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,  
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFBFBFB, 0xF4F4F4, 0xEBEBEB, 0xE3E3E3, 0xEFEFEF, 0xF7F7F7, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF7F7F7, 0xFCFCFC 
};
//////////////////////////////////////////////
//4. 
const long pizzahut4[] PROGMEM =
{
0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,        0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,
0xFEFEFE, 0xFFFFFF, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE,        0xFEFEFE, 0xFFFFFF, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xE1E1E1, 0xF5F5F5, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF3F3F3, 0xD3D3D3, 0xC4C4C4, 0xDBDBDB, 0xE8E8E8, 0xF3F3F3, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xE3E3E3, 0x8A8A8A, 0x454545, 0xB5B5B5, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,
0x808080, 0x808080, 0x848484, 0x606060, 0x484848, 0x474545, 0x464545, 0x464444, 0x000000, 0x000000, 0xA0A0A0, 0xE1E1E1, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,        0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xB5B5B5, 0x404040, 0x656262, 0xD6D4D4, 0xFCFCFC, 0xFCFCFC, 0xC8C8C8, 0xC7C7C7, 0xEDEDED, 
0xFCFCFC, 0xFCFCFC, 0xF0F0F0, 0xD4D4D4, 0xBABABA, 0xABABAB, 0xBDBDBD, 0xCDCDCD, 0xC0C0C0, 0x000000, 0x000000, 0xFEFEFE, 0x2C2C2C, 0x303030, 0x2F2F2F, 0x2F2F2F,        0xAAA9A9, 0x424141, 0x7E7E7E, 0xFCFCFC, 0xF2F2F2, 0xADADAD, 0x2C2C2C, 0x494949, 0xDBDBDB, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,
0x262626, 0x262626, 0x949494, 0xDBDBDB, 0xE1E1E1, 0xA7A7A7, 0x464646, 0x3E3E3E, 0x515151, 0x636363, 0x7D7D7D, 0x888888, 0xA1A1A1, 0xAFAFAF, 0x989898, 0xABABAB,        0xDDDDDD, 0xFDFDFD, 0xC6C6C6, 0xCECECE, 0xF1F1F1, 0xFCFCFC, 0xFCFCFC, 0xF9F9F9, 0x505050, 0x262626, 0x898989, 0xE3E3E3, 0xFCFCFC, 0x807F7F, 0x2F2E2E, 0x8E8E8E, 
0x4C4B4B, 0x4B4A4A, 0x8C8C8C, 0xECECEC, 0xE7E7E7, 0xC4C3C3, 0x605D5D, 0x2A2A2A, 0x313030, 0x797676, 0xEFEFEF, 0xF3F3F3, 0x8F8F8F, 0x3D3D3D, 0x262626, 0x696969,        0x747474, 0x414040, 0x878484, 0xA9A6A6, 0x777474, 0x434242, 0x262626, 0x3A3939, 0x9A9898, 0xF5F5F5, 0xF6F6F6, 0xC2C2C2, 0x6C6C6C, 0x000000, 0x000000, 0x000000, 
0xE1E1E1, 0xA6A6A6, 0x363434, 0x393939, 0x909090, 0xF0F0F0, 0xE4E3E3, 0x999999, 0x3A3A3A, 0x333232, 0x767373, 0xD8D7D7, 0xFCFCFC, 0xA09E9E, 0x4D4B4B, 0x818080,        0xA1A0A0, 0x686565, 0x404040, 0xB9B9B9, 0xEDEDED, 0xFBFBFB, 0xD1D1D1, 0x4F4F4F, 0x292929, 0x262626, 0x292929, 0x333232, 0x3F3E3E, 0x3B3B3B, 0x2D2C2C, 0x414141, 
0x000000, 0x706E6E, 0xD7D6D6, 0xD6D5D5, 0x7B7878, 0x454343, 0x545454, 0xB8B8B8, 0xEBEBEB, 0xF2F2F2, 0xACACAC, 0x3C3C3C, 0x383636, 0x8B8A8A, 0xC9C9C9, 0xFCFCFC,        0x303030, 0x656464, 0xA09F9F, 0x7E7B7B, 0x555353, 0x444343, 0x737070, 0xACACAC, 0xB7B7B7, 0xF0F0F0, 0xFCFCFC, 0xF8F8F8, 0xC1C1C1, 0x404040, 0x000000, 0x000000,
0x969393, 0x636161, 0x000000, 0x3B3939, 0x353333, 0x7B7878, 0xE9E9E9, 0xC7C7C7, 0x8A8A8A, 0x4E4E4E, 0x3C3A3A, 0x464343, 0x999696, 0xE0DFDF, 0xC9C8C8, 0x848282,        0x646464, 0x5F5E5E, 0x404040, 0x747474, 0xF0F0F0, 0xFCFCFC, 0xFCFCFC, 0xF5F5F5, 0xF3F3F3, 0xC9C9C9, 0x616161, 0x575656, 0xB7B6B6, 0xEFEEEE, 0x9E9C9C, 0x413F3F, 
0xE0DFDF, 0xF6F6F6, 0xE9E9E9, 0xABAAAA, 0x5C5C5C, 0x3F3E3E, 0x424242, 0x494949, 0x686868, 0xE0E0E0, 0xCFCECE, 0xB3B3B3, 0xB3B3B3, 0xB3B3B3, 0xA7A7A7, 0xA7A6A6,        0x666565, 0xD4D4D4, 0xEBEBEB, 0xA2A2A2, 0x505050, 0x8A8888, 0xF4F4F4, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF7F7F7, 0xC0C0C0, 0xA8A8A8, 0xA8A8A8, 0xB8B8B8,
0xBDE1D8, 0xF2F2F2, 0xF8F8F8, 0xF8F8F8, 0xF8F8F8, 0xFCFCFC, 0xF2F2F2, 0xBBBBBB, 0xB8B8B8, 0xBABABA, 0xBABABA, 0xCACACA, 0xE6E6E6, 0xF8F8F8, 0xFCFCFC, 0xFCFCFC,        0xF9F9F9, 0xF1F1F1, 0xF1F1F1, 0xF9F9F9, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xD4D3D3, 0x737373, 0x7F7F7F, 0xD4D4D4, 0xF5F5F5, 0xADADAD,  
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0x5FBCA9,        0xEAEAEA, 0xFCFCFC, 0xDBDBDB, 0xA6A6A6, 0xC0C0C0, 0xFAFAFA, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,  
0xA1D3C9, 0xF4F4F4, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,        0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF2F2F2, 0xE6E6E6, 0xF2F2F2, 0xFCFCFC, 0xFCFCFC, 
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF7F7F7, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC
};
////////////////////////////////////////////////
//5. 
const long pizzahut5[] PROGMEM =
{
0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC,
0xFEFEFE, 0xFFFFFF, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xE1E1E1, 0xF5F5F5, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE,        0xFEFEFE, 0xFEFEFE, 0xFFFFFF, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xE3E3E3, 0x8A8A8A, 0x454545, 0xB5B5B5, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC,
0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xB5B5B5, 0x404040, 0x656262, 0xD6D4D4, 0xFCFCFC, 0xFCFCFC, 0xC8C8C8, 0xC7C7C7, 0xEDEDED,        0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 
0xAAA9A9, 0x424141, 0x7E7E7E, 0xFCFCFC, 0xF2F2F2, 0xADADAD, 0x2C2C2C, 0x494949, 0xDBDBDB, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF2F2F2, 0xE2E2E2, 0xD8D7D7, 0x989595, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC,
0xDDDDDD, 0xFDFDFD, 0xC6C6C6, 0xCECECE, 0xF1F1F1, 0xFCFCFC, 0xFCFCFC, 0xF9F9F9, 0x505050, 0x262626, 0x898989, 0xE3E3E3, 0xFCFCFC, 0x807F7F, 0x2F2E2E, 0x8E8E8E,        0xFAFAFA, 0xC4C4C4, 0x8E8E8E, 0xAFAFAF, 0xB6B3B3, 0xF6F6F6, 0x908D8D, 0xAAA9A9, 0xEEEEEE, 0x6C6B6B, 0x989898, 0xE4E4E4, 0xFBFBFB, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,  
0x747474, 0x414040, 0x878484, 0xA9A6A6, 0x777474, 0x434242, 0x262626, 0x3A3939, 0x9A9898, 0xF5F5F5, 0xF6F6F6, 0xC2C2C2, 0x6C6C6C, 0x000000, 0x000000, 0x000000,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xD7D6D6, 0x7A7676, 0x898686, 0xECECEC, 0x979797, 0x3D3C3C, 0x858282, 0x000000, 0x3D3D3D, 0x363636, 0x888888, 0xF6F6F6,
0xA1A0A0, 0x686565, 0x404040, 0xB9B9B9, 0xEDEDED, 0xFBFBFB, 0xD1D1D1, 0x4F4F4F, 0x292929, 0x262626, 0x292929, 0x333232, 0x3F3E3E, 0x3B3B3B, 0x2D2C2C, 0x414141,        0xF8F8F8, 0xADADAD, 0x262626, 0x6D6D6D, 0x727272, 0x3B3A3A, 0x282828, 0x7B7B7B, 0xE6E6E6, 0xAFAEAE, 0xFEFEFE, 0x000000, 0x000000, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,  
0x303030, 0x656464, 0xA09F9F, 0x7E7B7B, 0x555353, 0x444343, 0x737070, 0xACACAC, 0xB7B7B7, 0xF0F0F0, 0xFCFCFC, 0xF8F8F8, 0xC1C1C1, 0x404040, 0x000000, 0x000000,        0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0x000000, 0x787878, 0xFEFEFE, 0xD6D6D6, 0xDADADA, 0x464545, 0x313131, 0x9D9D9D, 0xD7D7D7, 0x636363, 0x262626, 0xCDCDCD, 0x707070,
0x646464, 0x5F5E5E, 0x404040, 0x747474, 0xF0F0F0, 0xFCFCFC, 0xFCFCFC, 0xF5F5F5, 0xF3F3F3, 0xC9C9C9, 0x616161, 0x575656, 0xB7B6B6, 0xEFEEEE, 0x9E9C9C, 0x413F3F,        0xB1B1B1, 0xEDEDED, 0x262626, 0x595959, 0xF2F2F2, 0xEDEDED, 0x8C8C8C, 0x373737, 0xD4D3D3, 0xF5F5F5, 0x616060, 0xFEFEFE, 0x000000, 0xF3F3F3, 0xFCFCFC, 0xFCFCFC,  
0x666565, 0xD4D4D4, 0xEBEBEB, 0xA2A2A2, 0x505050, 0x8A8888, 0xF4F4F4, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF7F7F7, 0xC0C0C0, 0xA8A8A8, 0xA8A8A8, 0xB8B8B8,        0xB4B2B2, 0x8D8A8A, 0x000000, 0x4E4E4E, 0x282828, 0x393939, 0x7D7D7D, 0xD0D0D0, 0x8A8A8A, 0xE4E4E4, 0xFCFCFC, 0xF8F8F8, 0xB0B0B0, 0x7D7D7D, 0xE0E0E0, 0xB9B9B9,
0xF9F9F9, 0xF1F1F1, 0xF1F1F1, 0xF9F9F9, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xD4D3D3, 0x737373, 0x7F7F7F, 0xD4D4D4, 0xF5F5F5, 0xADADAD,        0x5A5A5A, 0xF0F0F0, 0xDFDFDF, 0xF1F1F1, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xE2E2E2, 0xEDEDED, 0x919191, 0x919191, 0x5D5D5D, 0x303030, 0x626161, 0xA2A0A0, 0xAEACAC,  
0xEAEAEA, 0xFCFCFC, 0xDBDBDB, 0xA6A6A6, 0xC0C0C0, 0xFAFAFA, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0xE3E3E3, 0xCACACA, 0x6C6C6C, 0x4D4D4D, 0xBABABA, 0xEBEBEB, 0xE2E2E2, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xE6E6E6, 0x5D5B5B,
0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF2F2F2, 0xE6E6E6, 0xF2F2F2, 0xFCFCFC, 0xFCFCFC,        0xC6C4C4, 0xEEEEEE, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF2F2F2, 0xAAAAAA, 0x939393, 0xD4D4D4, 0xFCFCFC, 
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC,        0xFCFCFC, 0xEDEDED, 0xDDDDDD, 0xF1F1F1, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC
};
////////////////////////////////////////////////
//6.
const long pizzahut6[] PROGMEM =
{
0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFEFEFE, 0xFEFEFE, 0xFFFFFF, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE, 0xFEFEFE,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF2F2F2, 0xE2E2E2, 0xD8D7D7, 0x989595, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFAFAFA, 0xC4C4C4, 0x8E8E8E, 0xAFAFAF, 0xB6B3B3, 0xF6F6F6, 0x908D8D, 0xAAA9A9, 0xEEEEEE, 0x6C6B6B, 0x989898, 0xE4E4E4, 0xFBFBFB, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xD7D6D6, 0x7A7676, 0x898686, 0xECECEC, 0x979797, 0x3D3C3C, 0x858282, 0x000000, 0x3D3D3D, 0x363636, 0x888888, 0xF6F6F6,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xF8F8F8, 0xADADAD, 0x262626, 0x6D6D6D, 0x727272, 0x3B3A3A, 0x282828, 0x7B7B7B, 0xE6E6E6, 0xAFAEAE, 0xFEFEFE, 0x000000, 0x000000, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0x000000, 0x787878, 0xFEFEFE, 0xD6D6D6, 0xDADADA, 0x464545, 0x313131, 0x9D9D9D, 0xD7D7D7, 0x636363, 0x262626, 0xCDCDCD, 0x707070,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xB1B1B1, 0xEDEDED, 0x262626, 0x595959, 0xF2F2F2, 0xEDEDED, 0x8C8C8C, 0x373737, 0xD4D3D3, 0xF5F5F5, 0x616060, 0xFEFEFE, 0x000000, 0xF3F3F3, 0xFCFCFC, 0xFCFCFC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xB4B2B2, 0x8D8A8A, 0x000000, 0x4E4E4E, 0x282828, 0x393939, 0x7D7D7D, 0xD0D0D0, 0x8A8A8A, 0xE4E4E4, 0xFCFCFC, 0xF8F8F8, 0xB0B0B0, 0x7D7D7D, 0xE0E0E0, 0xB9B9B9,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0x5A5A5A, 0xF0F0F0, 0xDFDFDF, 0xF1F1F1, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xE2E2E2, 0xEDEDED, 0x919191, 0x919191, 0x5D5D5D, 0x303030, 0x626161, 0xA2A0A0, 0xAEACAC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xE3E3E3, 0xCACACA, 0x6C6C6C, 0x4D4D4D, 0xBABABA, 0xEBEBEB, 0xE2E2E2, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xE6E6E6, 0x5D5B5B,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xC6C4C4, 0xEEEEEE, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xF2F2F2, 0xAAAAAA, 0x939393, 0xD4D4D4, 0xFCFCFC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF,
0xFCFCFC, 0xEDEDED, 0xDDDDDD, 0xF1F1F1, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFCFCFC, 0xFDFDFD, 0xFCFCFC, 0xFCFCFC,       0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF
};


int go_num = 0;
int progwidth_num = 32; 
int nums=0;

void setup() {
    FastLED.addLeds<NEOPIXEL, DATA_PIN, GRB>(leds, NUM_LEDS);
    LEDS.setBrightness(10);  
}

void loop() { 
    for(int passtime = 0 ; passtime<9; passtime++){     
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
        leds[i] = pgm_read_dword(&( right[255 - i] )); 
      }
      
      FastLED.show();
      delay(350); 

      for(int i=0;i<NUM_LEDS;i++){
        leds[i] = pgm_read_dword(&( whitebackground[i] ));          
      }
      
      FastLED.show();
      delay(350);     
      }
      
    for(int passtime = 0 ; passtime<9; passtime++){     
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
        leds[i] = pgm_read_dword(&( left[255 - i] ));  
      }
      
      FastLED.show();
      delay(350);     

      for(int i=0;i<NUM_LEDS;i++){
        leds[i] = pgm_read_dword(&( whitebackground[i] ));          
      }
      
      FastLED.show();
      delay(350);    
      }


    for(int passtime = 0 ; passtime<9; passtime++){     
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
        leds[i] = pgm_read_dword(&( stopplz2[255 - i] ));   
      }
      
      FastLED.show();
      delay(350);  

      for(int i=0;i<NUM_LEDS;i++){
        leds[i] = pgm_read_dword(&( whitebackground[i] ));          
      }
      
      FastLED.show();
      delay(350);  
      }
      
    for(int passtime = 0 ; passtime<10; passtime++){
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
        leds[i] = pgm_read_dword(&(DigDug01[i]));
      }
      FastLED.show();
      delay(300);
      
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
        leds[i] = pgm_read_dword(&(DigDug02[i]));
      }
      FastLED.show();
      delay(300);  
    }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
for(int passtime = 0 ; passtime<5; passtime++){     
nums=15;
leds[nums-0] = CRGB(255, 255, 255);
leds[nums-1] = CRGB(255, 255, 255);
leds[nums-2] = CRGB(255, 255, 255);
leds[nums-3] = CRGB(255, 255, 255);
leds[nums-4] = CRGB(255, 255, 255);
leds[nums-5] = CRGB(255, 255, 255);
leds[nums-6] = CRGB(255, 255, 255);
leds[nums-7] = CRGB(0, 0, 0);
leds[nums-8] = CRGB(0, 0, 0);
leds[nums-9] = CRGB(0, 0, 0);
leds[nums-10] = CRGB(0, 0, 0);
leds[nums-11] = CRGB(255, 255, 255);
leds[nums-12] = CRGB(255, 255, 255);
leds[nums-13] = CRGB(255, 255, 255);
leds[nums-14] = CRGB(255, 255, 255);
leds[nums-15] = CRGB(255, 255, 255);

leds[16] = CRGB(255, 255, 255);
leds[17] = CRGB(255, 255, 255);
leds[18] = CRGB(255, 255, 255);
leds[19] = CRGB(255, 255, 255);
leds[20] = CRGB(255, 255, 255);
leds[21] = CRGB(255, 255, 255);
leds[22] = CRGB(255, 255, 255);
leds[23] = CRGB(255, 255, 255);
leds[24] = CRGB(0, 0, 0);
leds[25] = CRGB(0, 0, 0);
leds[26] = CRGB(0, 0, 0);
leds[27] = CRGB(255, 255, 255);
leds[28] = CRGB(255, 255, 255);
leds[29] = CRGB(255, 255, 255);
leds[30] = CRGB(255, 255, 255);
leds[31] = CRGB(255, 255, 255);

nums=47+32;
leds[nums-32] = CRGB(255, 255, 255);
leds[nums-33] = CRGB(255, 255, 255);
leds[nums-34] = CRGB(255, 255, 255);
leds[nums-35] = CRGB(255, 255, 255);
leds[nums-36] = CRGB(255, 255, 255);
leds[nums-37] = CRGB(255, 255, 255);
leds[nums-38] = CRGB(255, 255, 255);
leds[nums-39] = CRGB(255, 255, 255);
leds[nums-40] = CRGB(0, 0, 0);
leds[nums-41] = CRGB(0, 0, 0);
leds[nums-42] = CRGB(255, 255, 255);
leds[nums-43] = CRGB(255, 255, 255);
leds[nums-44] = CRGB(255, 255, 255);
leds[nums-45] = CRGB(255, 255, 255);
leds[nums-46] = CRGB(255, 255, 255);
leds[nums-47] = CRGB(255, 255, 255);

leds[48] = CRGB(255, 255, 255);
leds[49] = CRGB(255, 255, 255);
leds[50] = CRGB(255, 255, 255);
leds[51] = CRGB(255, 255, 255);
leds[52] = CRGB(255, 255, 255);
leds[53] = CRGB(255, 255, 255);
leds[54] = CRGB(255, 255, 255);
leds[55] = CRGB(255, 255, 255);
leds[56] = CRGB(0, 0, 0);
leds[57] = CRGB(0, 0, 0);
leds[58] = CRGB(255, 255, 255);
leds[59] = CRGB(255, 255, 255);
leds[60] = CRGB(255, 255, 255);
leds[61] = CRGB(255, 255, 255);
leds[62] = CRGB(255, 255, 255);
leds[63] = CRGB(255, 255, 255);

nums=79+64;
leds[nums-64] = CRGB(255, 255, 255);
leds[nums-65] = CRGB(255, 255, 255);
leds[nums-66] = CRGB(255, 255, 255);
leds[nums-67] = CRGB(255, 255, 255);
leds[nums-68] = CRGB(255, 255, 255);
leds[nums-69] = CRGB(255, 255, 255);
leds[nums-70] = CRGB(255, 255, 255);
leds[nums-71] = CRGB(255, 255, 255);
leds[nums-72] = CRGB(0, 0, 0);
leds[nums-73] = CRGB(0, 0, 0);
leds[nums-74] = CRGB(255, 255, 255);
leds[nums-75] = CRGB(255, 255, 255);
leds[nums-76] = CRGB(255, 255, 255);
leds[nums-77] = CRGB(255, 255, 255);
leds[nums-78] = CRGB(255, 255, 255);
leds[nums-79] = CRGB(255, 255, 255);

leds[80] = CRGB(255, 255, 255);
leds[81] = CRGB(255, 255, 255);
leds[82] = CRGB(255, 255, 255);
leds[83] = CRGB(255, 255, 255);
leds[84] = CRGB(0, 0, 0);
leds[85] = CRGB(0, 0, 0);
leds[86] = CRGB(0, 0, 0);
leds[87] = CRGB(0, 0, 0);
leds[88] = CRGB(0, 0, 0);
leds[89] = CRGB(0, 0, 0);
leds[90] = CRGB(0, 0, 0);
leds[91] = CRGB(0, 0, 0);
leds[92] = CRGB(255, 255, 255);
leds[93] = CRGB(255, 255, 255);
leds[94] = CRGB(255, 255, 255);
leds[95] = CRGB(255, 255, 255);

nums=111+96;
leds[nums-96] = CRGB(255, 255, 255);
leds[nums-97] = CRGB(255, 255, 255);
leds[nums-98] = CRGB(0, 0, 0);
leds[nums-99] = CRGB(0, 0, 0);
leds[nums-100] = CRGB(0, 179, 179);
leds[nums-101] = CRGB(0, 179, 179);
leds[nums-102] = CRGB(0, 179, 179);
leds[nums-103] = CRGB(0, 179, 179);
leds[nums-104] = CRGB(0, 179, 179);
leds[nums-105] = CRGB(0, 179, 179);
leds[nums-106] = CRGB(0, 179, 179);
leds[nums-107] = CRGB(0, 179, 179);
leds[nums-108] = CRGB(0, 0, 0);
leds[nums-109] = CRGB(255, 255, 255);
leds[nums-110] = CRGB(255, 255, 255);
leds[nums-111] = CRGB(255, 255, 255);

leds[112] = CRGB(255, 255, 255);
leds[113] = CRGB(0, 0, 0);
leds[114] = CRGB(0, 179, 179);
leds[115] = CRGB(0, 179, 179);
leds[116] = CRGB(102, 255, 255);
leds[117] = CRGB(0, 0, 0);
leds[118] = CRGB(0, 0, 0);
leds[119] = CRGB(0, 0, 0);
leds[120] = CRGB(102, 255, 255);
leds[121] = CRGB(102, 255, 255);
leds[122] = CRGB(102, 255, 255);
leds[123] = CRGB(0, 179, 179);
leds[124] = CRGB(0, 0, 0);
leds[125] = CRGB(255, 255, 255);
leds[126] = CRGB(255, 255, 255);
leds[127] = CRGB(255, 255, 255);

nums=143+128;
leds[nums-128] = CRGB(0, 0, 0);
leds[nums-129] = CRGB(0, 179, 179);
leds[nums-130] = CRGB(102, 255, 255);
leds[nums-131] = CRGB(102, 255, 255);
leds[nums-132] = CRGB(0, 0, 0);
leds[nums-133] = CRGB(102, 255, 255);
leds[nums-134] = CRGB(102, 255, 255);
leds[nums-135] = CRGB(102, 255, 255);
leds[nums-136] = CRGB(0, 0, 0);
leds[nums-137] = CRGB(102, 255, 255);
leds[nums-138] = CRGB(102, 255, 255);
leds[nums-139] = CRGB(102, 255, 255);
leds[nums-140] = CRGB(0, 0, 0);
leds[nums-141] = CRGB(255, 255, 255);
leds[nums-142] = CRGB(255, 255, 255);
leds[nums-143] = CRGB(255, 255, 255);

leds[144] = CRGB(0, 0, 0);
leds[145] = CRGB(102, 255, 255);
leds[146] = CRGB(102, 255, 255);
leds[147] = CRGB(0, 0, 0);
leds[148] = CRGB(102, 255, 255);
leds[149] = CRGB(102, 255, 255);
leds[150] = CRGB(102, 255, 255);
leds[151] = CRGB(102, 255, 255);
leds[152] = CRGB(0, 0, 0);
leds[153] = CRGB(102, 255, 255);
leds[154] = CRGB(102, 255, 255);
leds[155] = CRGB(102, 255, 255);
leds[156] = CRGB(0, 0, 0);
leds[157] = CRGB(0, 0, 0);
leds[158] = CRGB(255, 255, 255);
leds[159] = CRGB(255, 255, 255);

nums=175+160;
leds[nums-160] = CRGB(0, 0, 0);
leds[nums-161] = CRGB(102, 255, 255);
leds[nums-162] = CRGB(102, 255, 255);
leds[nums-163] = CRGB(102, 255, 255);
leds[nums-164] = CRGB(102, 255, 255);
leds[nums-165] = CRGB(102, 255, 255);
leds[nums-166] = CRGB(102, 255, 255);
leds[nums-167] = CRGB(102, 255, 255);
leds[nums-168] = CRGB(102, 255, 255);
leds[nums-169] = CRGB(102, 255, 255);
leds[nums-170] = CRGB(102, 255, 255);
leds[nums-171] = CRGB(102, 255, 255);
leds[nums-172] = CRGB(0, 0, 0);
leds[nums-173] = CRGB(255, 255, 121);
leds[nums-174] = CRGB(0, 0, 0);
leds[nums-175] = CRGB(255, 255, 255);

leds[176] = CRGB(0, 0, 0);
leds[177] = CRGB(0, 0, 0);
leds[178] = CRGB(0, 0, 0);
leds[179] = CRGB(0, 0, 0);
leds[180] = CRGB(102, 255, 255);
leds[181] = CRGB(102, 255, 255);
leds[182] = CRGB(102, 255, 255);
leds[183] = CRGB(102, 255, 255);
leds[184] = CRGB(102, 255, 255);
leds[185] = CRGB(102, 255, 255);
leds[186] = CRGB(102, 255, 255);
leds[187] = CRGB(102, 255, 255);
leds[188] = CRGB(0, 0, 0);
leds[189] = CRGB(178, 179, 0);
leds[190] = CRGB(178, 179, 0);
leds[191] = CRGB(0, 0, 0);

nums=207+192;
leds[nums-192] = CRGB(255, 255, 255);
leds[nums-193] = CRGB(255, 255, 255);
leds[nums-194] = CRGB(255, 255, 255);
leds[nums-195] = CRGB(255, 255, 255);
leds[nums-196] = CRGB(0, 0, 0);
leds[nums-197] = CRGB(102, 255, 255);
leds[nums-198] = CRGB(102, 255, 255);
leds[nums-199] = CRGB(102, 255, 255);
leds[nums-200] = CRGB(102, 255, 255);
leds[nums-201] = CRGB(0, 0, 0);
leds[nums-202] = CRGB(0, 0, 0);
leds[nums-203] = CRGB(102, 255, 255);
leds[nums-204] = CRGB(0, 0, 0);
leds[nums-205] = CRGB(255, 255, 121);
leds[nums-206] = CRGB(0, 0, 0);
leds[nums-207] = CRGB(255, 255, 255);

leds[208] = CRGB(255, 255, 255);
leds[209] = CRGB(255, 255, 255);
leds[210] = CRGB(255, 255, 255);
leds[211] = CRGB(255, 255, 255);
leds[212] = CRGB(255, 255, 255);
leds[213] = CRGB(0, 0, 0);
leds[214] = CRGB(102, 255, 255);
leds[215] = CRGB(102, 255, 255);
leds[216] = CRGB(102, 255, 255);
leds[217] = CRGB(0, 0, 0);
leds[218] = CRGB(0, 0, 0);
leds[219] = CRGB(102, 255, 255);
leds[220] = CRGB(0, 0, 0);
leds[221] = CRGB(0, 0, 0);
leds[222] = CRGB(255, 255, 255);
leds[223] = CRGB(255, 255, 255);

nums=239+224;
leds[nums-224] = CRGB(255, 255, 255);
leds[nums-225] = CRGB(255, 255, 255);
leds[nums-226] = CRGB(255, 255, 255);
leds[nums-227] = CRGB(255, 255, 255);
leds[nums-228] = CRGB(255, 255, 255);
leds[nums-229] = CRGB(0, 0, 0);
leds[nums-230] = CRGB(102, 255, 255);
leds[nums-231] = CRGB(102, 255, 255);
leds[nums-232] = CRGB(102, 255, 255);
leds[nums-233] = CRGB(102, 255, 255);
leds[nums-234] = CRGB(102, 255, 255);
leds[nums-235] = CRGB(102, 255, 255);
leds[nums-236] = CRGB(0, 0, 0);
leds[nums-237] = CRGB(255, 255, 255);
leds[nums-238] = CRGB(255, 255, 255);
leds[nums-239] = CRGB(255, 255, 255);

leds[240] = CRGB(255, 255, 255);
leds[241] = CRGB(255, 255, 255);
leds[242] = CRGB(255, 255, 255);
leds[243] = CRGB(255, 255, 255);
leds[244] = CRGB(255, 255, 255);
leds[245] = CRGB(255, 255, 255);
leds[246] = CRGB(0, 0, 0);
leds[247] = CRGB(102, 255, 255);
leds[248] = CRGB(102, 255, 255);
leds[249] = CRGB(102, 255, 255);
leds[250] = CRGB(102, 255, 255);
leds[251] = CRGB(0, 0, 0);
leds[252] = CRGB(255, 255, 255);
leds[253] = CRGB(255, 255, 255);
leds[254] = CRGB(255, 255, 255);
leds[255] = CRGB(255, 255, 255);
FastLED.show();
delay(111);

leds[22] = CRGB(0, 0, 0);
leds[23] = CRGB(0, 0, 0);
leds[24] = CRGB(255, 255, 255);

nums=47+32;
leds[nums-38] = CRGB(0, 0, 0);
leds[nums-40] = CRGB(255, 255, 255);


leds[54] = CRGB(0, 0, 0);
leds[56] = CRGB(255, 255, 255);

nums=79+64;
leds[nums-70] = CRGB(0, 0, 0);
leds[nums-72] = CRGB(255, 255, 255);

nums=111+96;
leds[nums-98] = CRGB(255, 255, 255);


leds[113] = CRGB(255, 255, 255);
leds[114] = CRGB(0, 0, 0);
leds[116] = CRGB(0, 0, 0);
leds[118] = CRGB(102, 255, 255);
leds[119] = CRGB(102, 255, 255);
leds[123] = CRGB(102, 255, 255);
leds[124] = CRGB(0, 179, 179);
leds[125] = CRGB(0, 0, 0);

nums=143+128;
leds[nums-128] = CRGB(255, 255, 255);
leds[nums-129] = CRGB(0, 0, 0);
leds[nums-130] = CRGB(0, 179, 179);
leds[nums-131] = CRGB(0, 0, 0);
leds[nums-132] = CRGB(102, 255, 255);
leds[nums-134] = CRGB(0, 0, 0);
leds[nums-136] = CRGB(102, 255, 255);
leds[nums-140] = CRGB(102, 255, 255);
leds[nums-141] = CRGB(0, 0, 0);


leds[144] = CRGB(255, 255, 255);
leds[145] = CRGB(0, 0, 0);
leds[146] = CRGB(0, 0, 0);
leds[147] = CRGB(102, 255, 255);
leds[150] = CRGB(0, 0, 0);
leds[152] = CRGB(102, 255, 255);
leds[154] = CRGB(0, 0, 0);
leds[155] = CRGB(0, 0, 0);

nums=175+160;
leds[nums-160] = CRGB(255, 255, 255);
leds[nums-161] = CRGB(0, 0, 0);
leds[nums-169] = CRGB(0, 0, 0);
leds[nums-170] = CRGB(255, 255, 121);
leds[nums-171] = CRGB(255, 255, 121);
leds[nums-173] = CRGB(0, 0, 0);
leds[nums-174] = CRGB(255, 255, 255);


leds[176] = CRGB(255, 255, 255);
leds[185] = CRGB(0, 0, 0);
leds[186] = CRGB(178, 179, 0);
leds[187] = CRGB(178, 179, 0);
leds[188] = CRGB(178, 179, 0);
leds[189] = CRGB(0, 0, 0);
leds[190] = CRGB(255, 255, 255);
leds[191] = CRGB(255, 255, 255);

nums=207+192;
leds[nums-199] = CRGB(0, 0, 0);
leds[nums-200] = CRGB(0, 0, 0);
leds[nums-202] = CRGB(255, 255, 121);
leds[nums-203] = CRGB(255, 255, 121);
leds[nums-205] = CRGB(0, 0, 0);
leds[nums-206] = CRGB(255, 255, 255);


leds[215] = CRGB(0, 0, 0);
leds[216] = CRGB(0, 0, 0);
leds[217] = CRGB(102, 255, 255);
leds[219] = CRGB(0, 0, 0);
leds[221] = CRGB(255, 255, 255);
FastLED.show();
delay(111);

nums=15;
leds[nums-6] = CRGB(0, 0, 0);
leds[nums-10] = CRGB(255, 255, 255);


leds[21] = CRGB(0, 0, 0);
leds[23] = CRGB(255, 255, 255);
leds[84] = CRGB(255, 255, 255);
leds[91] = CRGB(255, 255, 255);

nums=111+96;
leds[nums-99] = CRGB(255, 255, 255);
leds[nums-100] = CRGB(0, 0, 0);
leds[nums-107] = CRGB(0, 0, 0);
leds[nums-108] = CRGB(255, 255, 255);


leds[114] = CRGB(255, 255, 255);
leds[115] = CRGB(0, 0, 0);
leds[116] = CRGB(0, 179, 179);
leds[117] = CRGB(0, 179, 179);
leds[118] = CRGB(0, 179, 179);
leds[121] = CRGB(0, 179, 179);
leds[122] = CRGB(0, 179, 179);
leds[123] = CRGB(0, 179, 179);
leds[124] = CRGB(0, 0, 0);
leds[125] = CRGB(255, 255, 255);

nums=143+128;
leds[nums-129] = CRGB(255, 255, 255);
leds[nums-130] = CRGB(255, 255, 255);
leds[nums-133] = CRGB(0, 179, 179);
leds[nums-134] = CRGB(102, 255, 255);
leds[nums-138] = CRGB(0, 179, 179);
leds[nums-140] = CRGB(0, 0, 0);
leds[nums-141] = CRGB(255, 255, 255);


leds[145] = CRGB(255, 255, 255);
leds[146] = CRGB(255, 255, 255);
leds[147] = CRGB(0, 0, 0);
leds[149] = CRGB(0, 179, 179);
leds[150] = CRGB(102, 255, 255);
leds[151] = CRGB(0, 0, 0);
leds[152] = CRGB(0, 0, 0);
leds[154] = CRGB(0, 179, 179);
leds[155] = CRGB(102, 255, 255);
leds[157] = CRGB(255, 255, 255);

nums=175+160;
leds[nums-161] = CRGB(255, 255, 255);
leds[nums-162] = CRGB(255, 255, 255);
leds[nums-163] = CRGB(0, 0, 0);
leds[nums-166] = CRGB(0, 0, 0);
leds[nums-167] = CRGB(255, 255, 121);
leds[nums-168] = CRGB(255, 255, 121);
leds[nums-170] = CRGB(102, 255, 255);
leds[nums-171] = CRGB(102, 255, 255);
leds[nums-173] = CRGB(255, 255, 255);


leds[177] = CRGB(255, 255, 255);
leds[178] = CRGB(255, 255, 255);
leds[180] = CRGB(0, 0, 0);
leds[182] = CRGB(0, 0, 0);
leds[183] = CRGB(178, 179, 0);
leds[184] = CRGB(178, 179, 0);
leds[186] = CRGB(102, 255, 255);
leds[187] = CRGB(0, 0, 0);
leds[188] = CRGB(0, 0, 0);
leds[189] = CRGB(255, 255, 255);

nums=207+192;
leds[nums-197] = CRGB(0, 0, 0);
leds[nums-198] = CRGB(0, 0, 0);
leds[nums-199] = CRGB(255, 255, 121);
leds[nums-200] = CRGB(255, 255, 121);
leds[nums-202] = CRGB(0, 0, 0);
leds[nums-203] = CRGB(0, 0, 0);
leds[nums-204] = CRGB(255, 255, 255);
leds[nums-205] = CRGB(255, 255, 255);


leds[212] = CRGB(0, 0, 0);
leds[220] = CRGB(255, 255, 255);

nums=239+224;
leds[nums-228] = CRGB(0, 0, 0);
leds[nums-229] = CRGB(102, 255, 255);
leds[nums-235] = CRGB(0, 0, 0);
leds[nums-236] = CRGB(255, 255, 255);


leds[245] = CRGB(0, 0, 0);
leds[246] = CRGB(102, 255, 255);
leds[250] = CRGB(0, 0, 0);
leds[251] = CRGB(255, 255, 255);
FastLED.show();
delay(111);

nums=15;
leds[nums-5] = CRGB(0, 0, 0);
leds[nums-9] = CRGB(255, 255, 255);


leds[24] = CRGB(0, 0, 0);
leds[26] = CRGB(255, 255, 255);
leds[84] = CRGB(0, 0, 0);
leds[91] = CRGB(0, 0, 0);

nums=111+96;
leds[nums-99] = CRGB(0, 0, 0);
leds[nums-100] = CRGB(0, 179, 179);
leds[nums-107] = CRGB(0, 179, 179);
leds[nums-108] = CRGB(0, 0, 0);


leds[114] = CRGB(0, 0, 0);
leds[115] = CRGB(0, 179, 179);
leds[116] = CRGB(102, 255, 255);
leds[117] = CRGB(102, 255, 255);
leds[118] = CRGB(102, 255, 255);
leds[121] = CRGB(102, 255, 255);
leds[122] = CRGB(0, 0, 0);
leds[123] = CRGB(0, 0, 0);
leds[124] = CRGB(0, 179, 179);
leds[125] = CRGB(0, 0, 0);

nums=143+128;
leds[nums-130] = CRGB(0, 0, 0);
leds[nums-131] = CRGB(102, 255, 255);
leds[nums-133] = CRGB(102, 255, 255);
leds[nums-137] = CRGB(0, 0, 0);
leds[nums-138] = CRGB(102, 255, 255);
leds[nums-141] = CRGB(0, 179, 179);
leds[nums-142] = CRGB(0, 0, 0);


leds[146] = CRGB(0, 0, 0);
leds[148] = CRGB(0, 0, 0);
leds[149] = CRGB(0, 0, 0);
leds[151] = CRGB(102, 255, 255);
leds[152] = CRGB(102, 255, 255);
leds[153] = CRGB(0, 0, 0);
leds[154] = CRGB(102, 255, 255);
leds[156] = CRGB(102, 255, 255);
leds[157] = CRGB(0, 0, 0);
leds[158] = CRGB(0, 0, 0);

nums=175+160;
leds[nums-162] = CRGB(0, 0, 0);
leds[nums-164] = CRGB(255, 255, 121);
leds[nums-165] = CRGB(255, 255, 121);
leds[nums-167] = CRGB(102, 255, 255);
leds[nums-168] = CRGB(102, 255, 255);
leds[nums-169] = CRGB(102, 255, 255);
leds[nums-172] = CRGB(102, 255, 255);
leds[nums-173] = CRGB(102, 255, 255);
leds[nums-174] = CRGB(0, 0, 0);


leds[178] = CRGB(0, 0, 0);
leds[179] = CRGB(178, 179, 0);
leds[180] = CRGB(178, 179, 0);
leds[181] = CRGB(178, 179, 0);
leds[183] = CRGB(102, 255, 255);
leds[184] = CRGB(102, 255, 255);
leds[185] = CRGB(102, 255, 255);
leds[187] = CRGB(102, 255, 255);
leds[189] = CRGB(0, 0, 0);
leds[190] = CRGB(0, 0, 0);

nums=207+192;
leds[nums-194] = CRGB(0, 0, 0);
leds[nums-195] = CRGB(0, 0, 0);
leds[nums-196] = CRGB(255, 255, 121);
leds[nums-197] = CRGB(255, 255, 121);
leds[nums-199] = CRGB(0, 0, 0);
leds[nums-200] = CRGB(0, 0, 0);
leds[nums-201] = CRGB(102, 255, 255);
leds[nums-202] = CRGB(102, 255, 255);


leds[211] = CRGB(0, 0, 0);
leds[219] = CRGB(255, 255, 255);

nums=239+224;
leds[nums-227] = CRGB(0, 0, 0);
leds[nums-228] = CRGB(102, 255, 255);
leds[nums-234] = CRGB(0, 0, 0);
leds[nums-235] = CRGB(255, 255, 255);


leds[244] = CRGB(0, 0, 0);
leds[245] = CRGB(102, 255, 255);
leds[249] = CRGB(0, 0, 0);
leds[250] = CRGB(255, 255, 255);
FastLED.show();
delay(111);


leds[23] = CRGB(0, 0, 0);
leds[24] = CRGB(255, 255, 255);
leds[25] = CRGB(255, 255, 255);

nums=47+32;
leds[nums-39] = CRGB(0, 0, 0);
leds[nums-41] = CRGB(255, 255, 255);


leds[55] = CRGB(0, 0, 0);
leds[57] = CRGB(255, 255, 255);

nums=79+64;
leds[nums-71] = CRGB(0, 0, 0);
leds[nums-73] = CRGB(255, 255, 255);

nums=111+96;
leds[nums-109] = CRGB(0, 0, 0);


leds[114] = CRGB(255, 255, 255);
leds[115] = CRGB(0, 0, 0);
leds[116] = CRGB(0, 179, 179);
leds[120] = CRGB(0, 0, 0);
leds[121] = CRGB(0, 0, 0);
leds[123] = CRGB(102, 255, 255);
leds[125] = CRGB(0, 179, 179);
leds[126] = CRGB(0, 0, 0);

nums=143+128;
leds[nums-130] = CRGB(255, 255, 255);
leds[nums-131] = CRGB(0, 0, 0);
leds[nums-135] = CRGB(0, 0, 0);
leds[nums-137] = CRGB(102, 255, 255);
leds[nums-139] = CRGB(0, 0, 0);
leds[nums-140] = CRGB(102, 255, 255);
leds[nums-141] = CRGB(102, 255, 255);
leds[nums-142] = CRGB(0, 179, 179);
leds[nums-143] = CRGB(0, 0, 0);


leds[148] = CRGB(102, 255, 255);
leds[149] = CRGB(102, 255, 255);
leds[151] = CRGB(0, 0, 0);
leds[153] = CRGB(102, 255, 255);
leds[156] = CRGB(0, 0, 0);
leds[157] = CRGB(102, 255, 255);
leds[158] = CRGB(102, 255, 255);
leds[159] = CRGB(0, 0, 0);

nums=175+160;
leds[nums-161] = CRGB(0, 0, 0);
leds[nums-162] = CRGB(255, 255, 121);
leds[nums-164] = CRGB(102, 255, 255);
leds[nums-165] = CRGB(102, 255, 255);
leds[nums-166] = CRGB(102, 255, 255);
leds[nums-174] = CRGB(102, 255, 255);
leds[nums-175] = CRGB(0, 0, 0);


leds[176] = CRGB(0, 0, 0);
leds[177] = CRGB(178, 179, 0);
leds[178] = CRGB(178, 179, 0);
leds[179] = CRGB(0, 0, 0);
leds[180] = CRGB(102, 255, 255);
leds[181] = CRGB(102, 255, 255);
leds[182] = CRGB(102, 255, 255);
leds[191] = CRGB(0, 0, 0);

nums=207+192;
leds[nums-193] = CRGB(0, 0, 0);
leds[nums-194] = CRGB(255, 255, 121);
leds[nums-196] = CRGB(102, 255, 255);
leds[nums-197] = CRGB(0, 0, 0);
leds[nums-199] = CRGB(102, 255, 255);
leds[nums-200] = CRGB(102, 255, 255);


leds[210] = CRGB(0, 0, 0);
leds[212] = CRGB(102, 255, 255);
leds[214] = CRGB(0, 0, 0);
leds[215] = CRGB(102, 255, 255);
leds[216] = CRGB(102, 255, 255);
FastLED.show();
delay(111);


leds[23] = CRGB(255, 255, 255);
leds[24] = CRGB(0, 0, 0);
leds[25] = CRGB(0, 0, 0);

nums=47+32;
leds[nums-39] = CRGB(255, 255, 255);
leds[nums-41] = CRGB(0, 0, 0);


leds[55] = CRGB(255, 255, 255);
leds[57] = CRGB(0, 0, 0);

nums=79+64;
leds[nums-71] = CRGB(255, 255, 255);
leds[nums-73] = CRGB(0, 0, 0);

nums=111+96;
leds[nums-109] = CRGB(255, 255, 255);


leds[118] = CRGB(0, 0, 0);
leds[119] = CRGB(0, 0, 0);
leds[120] = CRGB(102, 255, 255);
leds[121] = CRGB(102, 255, 255);
leds[122] = CRGB(102, 255, 255);
leds[123] = CRGB(0, 179, 179);
leds[125] = CRGB(0, 0, 0);
leds[126] = CRGB(255, 255, 255);

nums=143+128;
leds[nums-133] = CRGB(0, 0, 0);
leds[nums-135] = CRGB(102, 255, 255);
leds[nums-136] = CRGB(0, 0, 0);
leds[nums-139] = CRGB(102, 255, 255);
leds[nums-140] = CRGB(0, 179, 179);
leds[nums-141] = CRGB(0, 0, 0);
leds[nums-142] = CRGB(255, 255, 255);
leds[nums-143] = CRGB(255, 255, 255);


leds[146] = CRGB(255, 255, 255);
leds[149] = CRGB(0, 0, 0);
leds[151] = CRGB(102, 255, 255);
leds[153] = CRGB(0, 0, 0);
leds[156] = CRGB(102, 255, 255);
leds[157] = CRGB(0, 0, 0);
leds[158] = CRGB(255, 255, 255);
leds[159] = CRGB(255, 255, 255);

nums=175+160;
leds[nums-161] = CRGB(255, 255, 255);
leds[nums-162] = CRGB(255, 255, 255);
leds[nums-173] = CRGB(0, 0, 0);
leds[nums-174] = CRGB(255, 255, 255);
leds[nums-175] = CRGB(255, 255, 255);


leds[176] = CRGB(255, 255, 255);
leds[177] = CRGB(255, 255, 255);
leds[178] = CRGB(0, 0, 0);
leds[186] = CRGB(0, 179, 179);
leds[187] = CRGB(0, 0, 0);
leds[190] = CRGB(255, 255, 255);
leds[191] = CRGB(255, 255, 255);

nums=207+192;
leds[nums-193] = CRGB(255, 255, 255);
leds[nums-194] = CRGB(255, 255, 255);
leds[nums-196] = CRGB(0, 0, 0);
leds[nums-197] = CRGB(102, 255, 255);
leds[nums-198] = CRGB(102, 255, 255);


leds[210] = CRGB(255, 255, 255);
leds[212] = CRGB(0, 0, 0);
leds[213] = CRGB(102, 255, 255);
leds[214] = CRGB(102, 255, 255);
FastLED.show();
delay(111);

nums=15;
leds[nums-5] = CRGB(255, 255, 255);
leds[nums-9] = CRGB(0, 0, 0);


leds[24] = CRGB(255, 255, 255);
leds[26] = CRGB(0, 0, 0);
leds[84] = CRGB(255, 255, 255);
leds[91] = CRGB(255, 255, 255);

nums=111+96;
leds[nums-99] = CRGB(255, 255, 255);
leds[nums-100] = CRGB(0, 0, 0);
leds[nums-107] = CRGB(0, 0, 0);
leds[nums-108] = CRGB(255, 255, 255);


leds[116] = CRGB(0, 0, 0);
leds[117] = CRGB(0, 179, 179);
leds[118] = CRGB(0, 179, 179);
leds[119] = CRGB(0, 179, 179);
leds[120] = CRGB(0, 179, 179);
leds[121] = CRGB(0, 179, 179);
leds[122] = CRGB(0, 179, 179);
leds[123] = CRGB(0, 0, 0);
leds[124] = CRGB(0, 0, 0);
leds[125] = CRGB(255, 255, 255);

nums=143+128;
leds[nums-135] = CRGB(0, 179, 179);
leds[nums-136] = CRGB(0, 179, 179);
leds[nums-138] = CRGB(0, 0, 0);
leds[nums-140] = CRGB(0, 0, 0);
leds[nums-141] = CRGB(255, 255, 255);


leds[149] = CRGB(102, 255, 255);
leds[153] = CRGB(102, 255, 255);
leds[156] = CRGB(0, 0, 0);
leds[157] = CRGB(255, 255, 255);

nums=175+160;
leds[nums-172] = CRGB(0, 0, 0);
leds[nums-173] = CRGB(255, 255, 255);


leds[178] = CRGB(255, 255, 255);
leds[180] = CRGB(0, 0, 0);
leds[181] = CRGB(0, 0, 0);
leds[182] = CRGB(0, 179, 179);
leds[185] = CRGB(0, 179, 179);
leds[186] = CRGB(0, 0, 0);
leds[189] = CRGB(255, 255, 255);

nums=207+192;
leds[nums-195] = CRGB(255, 255, 255);


leds[211] = CRGB(255, 255, 255);
leds[218] = CRGB(102, 255, 255);
leds[219] = CRGB(0, 0, 0);

nums=239+224;
leds[nums-227] = CRGB(255, 255, 255);
leds[nums-228] = CRGB(0, 0, 0);
leds[nums-234] = CRGB(102, 255, 255);
leds[nums-235] = CRGB(0, 0, 0);


leds[244] = CRGB(255, 255, 255);
leds[245] = CRGB(0, 0, 0);
leds[249] = CRGB(102, 255, 255);
leds[250] = CRGB(0, 0, 0);
FastLED.show();
delay(111);
}

    for(int passtime = 0 ; passtime<2; passtime++){
      
      for(go_num = 0; go_num<16;go_num++){
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
          if( (i/16) % 2 != 0 )  {  leds[i] = pgm_read_dword( &( pizzahut1[  (i/16)*progwidth_num + ( (i%16) + progwidth_num - go_num )%progwidth_num  ] ) );  }
          else if( (i/16) % 2 == 0 )  {  leds[i] = pgm_read_dword( &( pizzahut1[  (i/16)*progwidth_num + ( (i%16) + go_num )%progwidth_num  ] ) );  }
      }
      FastLED.show();
      delay(75);     
      }

      for(go_num = 0; go_num<16;go_num++){
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
          if( (i/16) % 2 != 0 )  {  leds[i] = pgm_read_dword( &( pizzahut2[  (i/16)*progwidth_num + ( (i%16) + progwidth_num - go_num )%progwidth_num  ] ) );  }
          else if( (i/16) % 2 == 0 )  {  leds[i] = pgm_read_dword( &( pizzahut2[  (i/16)*progwidth_num + ( (i%16) + go_num )%progwidth_num  ] ) );  }
      }
      FastLED.show();
      delay(75);     
      }


      for(go_num = 0; go_num<16;go_num++){
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
          if( (i/16) % 2 != 0 )  {  leds[i] = pgm_read_dword( &( pizzahut3[  (i/16)*progwidth_num + ( (i%16) + progwidth_num - go_num )%progwidth_num  ] ) );  }
          else if( (i/16) % 2 == 0 )  {  leds[i] = pgm_read_dword( &( pizzahut3[  (i/16)*progwidth_num + ( (i%16) + go_num )%progwidth_num  ] ) );  }


          if( leds[i] <= CRGB(80,80,80) ){
            leds[i] = CRGB(10,10,10);  
          }

          
      }
      FastLED.show();
      delay(75);     
      }

      for(go_num = 0; go_num<16;go_num++){
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
          if( (i/16) % 2 != 0 )  {  leds[i] = pgm_read_dword( &( pizzahut4[  (i/16)*progwidth_num + ( (i%16) + progwidth_num - go_num )%progwidth_num  ] ) );  }
          else if( (i/16) % 2 == 0 )  {  leds[i] = pgm_read_dword( &( pizzahut4[  (i/16)*progwidth_num + ( (i%16) + go_num )%progwidth_num  ] ) );  }

          if( leds[i] <= CRGB(80,80,80) ){
            leds[i] = CRGB(10,10,10);  
          }
          
      }
      FastLED.show();
      delay(75);     
      }

      for(go_num = 0; go_num<16;go_num++){
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
          if( (i/16) % 2 != 0 )  {  leds[i] = pgm_read_dword( &( pizzahut5[  (i/16)*progwidth_num + ( (i%16) + progwidth_num - go_num )%progwidth_num  ] ) );  }
          else if( (i/16) % 2 == 0 )  {  leds[i] = pgm_read_dword( &( pizzahut5[  (i/16)*progwidth_num + ( (i%16) + go_num )%progwidth_num  ] ) );  }

          if( leds[i] <= CRGB(80,80,80) ){
            leds[i] = CRGB(10,10,10);  
          }
          
      }
      FastLED.show();
      delay(75);     
      }

      for(go_num = 0; go_num<16;go_num++){
      FastLED.clear();
      for(int i=0;i<NUM_LEDS;i++){
          if( (i/16) % 2 != 0 )  {  leds[i] = pgm_read_dword( &( pizzahut6[  (i/16)*progwidth_num + ( (i%16) + progwidth_num - go_num )%progwidth_num  ] ) );  }
          else if( (i/16) % 2 == 0 )  {  leds[i] = pgm_read_dword( &( pizzahut6[  (i/16)*progwidth_num + ( (i%16) + go_num )%progwidth_num  ] ) );  }

          if( leds[i] <= CRGB(80,80,80) ){
            leds[i] = CRGB(10,10,10);  
          }
          
      }
      FastLED.show();
      delay(75);     
      }

    }
      
}

